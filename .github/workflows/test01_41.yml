name: CI Workflow

on:
  push:
   
jobs:

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_DATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_pgsql
          tools: composer:v2, phpunit

      - name: Install PHP dependencies
        run: |
          cd "backend"
          composer install --prefer-dist --no-progress --no-suggest
      - name: Copy .env file
        run: |
          cd "backend"
          cp .env.example .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
      - name: Generate key
        run: |
          cd "backend"
          php artisan key:generate
      - name: Run migration
        run: |
          cd "backend"
          php artisan migrate
      - name: Run backend tests
        run: |
          cd "backend"
          php artisan test
          
      
  Frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        cd frontend  # Change directory to the frontend folder
        npm install
    - name: Lint code
      run: |
        cd frontend  # Ensure all commands run in the correct directory
        npm run lint
   # - name: Run tests
    #  run: |
     #   cd frontend
      #  npm run test
    - name: Build project
      run: |
        cd frontend
        npm run build 
  build-and-push:
    runs-on: ubuntu-latest
    needs: [Frontend-test,backend-test]  # S'assure que les tests frontend sont passés avant de construire les images
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Connexion à DockerHub
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build et Push de l'image du Frontend
    - name: Docker Build and Push Frontend
      uses: docker/build-push-action@v3
      with:
        context: frontend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera_frontend:version

        file: frontend/Dockerfile

    # Build et Push de l'image du Backend
    - name: Docker Build and Push Backend
      uses: docker/build-push-action@v3
      with:
        context: backend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera_backend:version1

        file: backend/Dockerfile

    # Build et Push de l'image de la Base de données Backend
    #- name: Docker Build and Push Backend Database
      #uses: docker/build-push-action@v3
      #with:
        #context: backend/database
        #push: true
       # tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera_database:version2

      #  file: Dockerfile
        
    - name: Set up Docker Compose
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub (if needed)
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      run: |
        docker-compose -f docker-compose.yml build db
        docker-compose -f docker-compose.yml push db
  security:
  
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      
      - name: Install PHP dependencies
        run: |
          cd "backend"
          composer install --prefer-dist --no-progress --no-suggest
      
      - name: Run security check
        run: |
          cd "backend"
          composer audit
